// Generated by gencpp from file ur5_vs/joint_vel.msg
// DO NOT EDIT!


#ifndef UR5_VS_MESSAGE_JOINT_VEL_H
#define UR5_VS_MESSAGE_JOINT_VEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace ur5_vs
{
template <class ContainerAllocator>
struct joint_vel_
{
  typedef joint_vel_<ContainerAllocator> Type;

  joint_vel_()
    : vel0()
    , vel1()
    , vel2()
    , vel3()
    , vel4()
    , vel5()  {
    }
  joint_vel_(const ContainerAllocator& _alloc)
    : vel0(_alloc)
    , vel1(_alloc)
    , vel2(_alloc)
    , vel3(_alloc)
    , vel4(_alloc)
    , vel5(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _vel0_type;
  _vel0_type vel0;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _vel1_type;
  _vel1_type vel1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _vel2_type;
  _vel2_type vel2;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _vel3_type;
  _vel3_type vel3;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _vel4_type;
  _vel4_type vel4;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _vel5_type;
  _vel5_type vel5;





  typedef boost::shared_ptr< ::ur5_vs::joint_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur5_vs::joint_vel_<ContainerAllocator> const> ConstPtr;

}; // struct joint_vel_

typedef ::ur5_vs::joint_vel_<std::allocator<void> > joint_vel;

typedef boost::shared_ptr< ::ur5_vs::joint_vel > joint_velPtr;
typedef boost::shared_ptr< ::ur5_vs::joint_vel const> joint_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur5_vs::joint_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur5_vs::joint_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur5_vs::joint_vel_<ContainerAllocator1> & lhs, const ::ur5_vs::joint_vel_<ContainerAllocator2> & rhs)
{
  return lhs.vel0 == rhs.vel0 &&
    lhs.vel1 == rhs.vel1 &&
    lhs.vel2 == rhs.vel2 &&
    lhs.vel3 == rhs.vel3 &&
    lhs.vel4 == rhs.vel4 &&
    lhs.vel5 == rhs.vel5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur5_vs::joint_vel_<ContainerAllocator1> & lhs, const ::ur5_vs::joint_vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur5_vs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ur5_vs::joint_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur5_vs::joint_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur5_vs::joint_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur5_vs::joint_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur5_vs::joint_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur5_vs::joint_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur5_vs::joint_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab1015cffe235c76cd0840caa87e35b0";
  }

  static const char* value(const ::ur5_vs::joint_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab1015cffe235c76ULL;
  static const uint64_t static_value2 = 0xcd0840caa87e35b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur5_vs::joint_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur5_vs/joint_vel";
  }

  static const char* value(const ::ur5_vs::joint_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur5_vs::joint_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 vel0\n"
"std_msgs/Float64 vel1\n"
"std_msgs/Float64 vel2\n"
"std_msgs/Float64 vel3\n"
"std_msgs/Float64 vel4\n"
"std_msgs/Float64 vel5\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::ur5_vs::joint_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur5_vs::joint_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel0);
      stream.next(m.vel1);
      stream.next(m.vel2);
      stream.next(m.vel3);
      stream.next(m.vel4);
      stream.next(m.vel5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur5_vs::joint_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur5_vs::joint_vel_<ContainerAllocator>& v)
  {
    s << indent << "vel0: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.vel0);
    s << indent << "vel1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.vel1);
    s << indent << "vel2: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.vel2);
    s << indent << "vel3: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.vel3);
    s << indent << "vel4: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.vel4);
    s << indent << "vel5: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.vel5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR5_VS_MESSAGE_JOINT_VEL_H
