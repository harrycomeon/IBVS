// Generated by gencpp from file ur5_vs/sim_variables.msg
// DO NOT EDIT!


#ifndef UR5_VS_MESSAGE_SIM_VARIABLES_H
#define UR5_VS_MESSAGE_SIM_VARIABLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>

namespace ur5_vs
{
template <class ContainerAllocator>
struct sim_variables_
{
  typedef sim_variables_<ContainerAllocator> Type;

  sim_variables_()
    : sim_enable()
    , reconfigure()  {
    }
  sim_variables_(const ContainerAllocator& _alloc)
    : sim_enable(_alloc)
    , reconfigure(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _sim_enable_type;
  _sim_enable_type sim_enable;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _reconfigure_type;
  _reconfigure_type reconfigure;





  typedef boost::shared_ptr< ::ur5_vs::sim_variables_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur5_vs::sim_variables_<ContainerAllocator> const> ConstPtr;

}; // struct sim_variables_

typedef ::ur5_vs::sim_variables_<std::allocator<void> > sim_variables;

typedef boost::shared_ptr< ::ur5_vs::sim_variables > sim_variablesPtr;
typedef boost::shared_ptr< ::ur5_vs::sim_variables const> sim_variablesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur5_vs::sim_variables_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur5_vs::sim_variables_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur5_vs::sim_variables_<ContainerAllocator1> & lhs, const ::ur5_vs::sim_variables_<ContainerAllocator2> & rhs)
{
  return lhs.sim_enable == rhs.sim_enable &&
    lhs.reconfigure == rhs.reconfigure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur5_vs::sim_variables_<ContainerAllocator1> & lhs, const ::ur5_vs::sim_variables_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur5_vs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ur5_vs::sim_variables_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur5_vs::sim_variables_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur5_vs::sim_variables_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur5_vs::sim_variables_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur5_vs::sim_variables_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur5_vs::sim_variables_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur5_vs::sim_variables_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee6670fc044bef98d1a25a214ff7cacc";
  }

  static const char* value(const ::ur5_vs::sim_variables_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee6670fc044bef98ULL;
  static const uint64_t static_value2 = 0xd1a25a214ff7caccULL;
};

template<class ContainerAllocator>
struct DataType< ::ur5_vs::sim_variables_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur5_vs/sim_variables";
  }

  static const char* value(const ::ur5_vs::sim_variables_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur5_vs::sim_variables_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Bool sim_enable\n"
"std_msgs/Bool reconfigure\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::ur5_vs::sim_variables_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur5_vs::sim_variables_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sim_enable);
      stream.next(m.reconfigure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sim_variables_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur5_vs::sim_variables_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur5_vs::sim_variables_<ContainerAllocator>& v)
  {
    s << indent << "sim_enable: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.sim_enable);
    s << indent << "reconfigure: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.reconfigure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR5_VS_MESSAGE_SIM_VARIABLES_H
